extends layout
block content
    #indexcontainer.main-container
        svg.hidden
          defs
            symbol#icon-arrow(viewbox='0 0 24 24')
              title arrow
              polygon(points='6.3,12.8 20.9,12.8 20.9,11.2 6.3,11.2 10.2,7.2 9,6 3.1,12 9,18 10.2,16.8 ')
            symbol#icon-drop(viewbox='0 0 24 24')
              title drop
              path(d='M12,21c-3.6,0-6.6-3-6.6-6.6C5.4,11,10.8,4,11.4,3.2C11.6,3.1,11.8,3,12,3s0.4,0.1,0.6,0.3c0.6,0.8,6.1,7.8,6.1,11.2C18.6,18.1,15.6,21,12,21zM12,4.8c-1.8,2.4-5.2,7.4-5.2,9.6c0,2.9,2.3,5.2,5.2,5.2s5.2-2.3,5.2-5.2C17.2,12.2,13.8,7.3,12,4.8z')
              path(d='M12,18.2c-0.4,0-0.7-0.3-0.7-0.7s0.3-0.7,0.7-0.7c1.3,0,2.4-1.1,2.4-2.4c0-0.4,0.3-0.7,0.7-0.7c0.4,0,0.7,0.3,0.7,0.7C15.8,16.5,14.1,18.2,12,18.2z')
        script(src='js/anime.min.js')
        script(src='js/main.js')
        script.
          (function() {
          var lineMaker = new LineMaker({
          // position: if fixed the lines container will have fixed position.
          position: 'relative',
          // The lines settings:
          //
          // top, left, width, height: numerical for pixels or string for % and viewport units. Examples: 2 || '20%' || '50vw'.
          // color: the (bg)color of the line.
          // hidden: defines if the line is rendered initially or hidden by default.
          // animation: animation properties for the line
          // 		duration: animation speed.
          // 		easing: animation easing (animejs easing. To see all possible values console animejs.easings).
          // 		delay: animation delay.
          // 		direction: line animation direction. Possible values: TopBottom || BottomTop || LeftRight || RightLeft || CenterV || CenterH.
          lines: [
          {top: '1vh',  left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '6vh',  left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '11vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '16vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '21vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '26vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '31vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '36vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '41vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '46vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '51vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '56vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '61vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '66vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '71vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '76vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '81vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '86vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          {top: '91vh', left: (Math.random(100)*20).toString().concat('%'), width: (Math.random(100)*100).toString().concat('%'), height: 1, color: '#c7c6c6', hidden: true, animation: { duration: 2000, easing: 'easeInOutExpo', delay: 0, direction: 'LeftRight' }},
          ]
          });
          setTimeout(function() {
          disableButtons();
          lineMaker.animateLinesIn(enableButtons);
          }, 500);
          /*
          methods:
          // Shows all lines with an animation.
          // callback is optional.
          - lineMaker.animateLinesIn([callback]);
          // Hides all lines with an animation.
          // callback is optional.
          - lineMaker.animateLinesOut([callback]);
          // Shows one line with an animation.
          // lineIndex: index/position of the line in the LineMaker.options.lines array.
          // animationSettings is optional: if not passed, the animation settings defined in LineMaker.options.lines for each line will be used.
          - lineMaker.animateLineIn(lineIndex [,animationSettings]);
          // Hides one line with an animation.
          // lineIndex: index/position of the line in the LineMaker.options.lines array.
          // animationSettings is optional: if not passed, the animation settings defined in LineMaker.options.lines for each line will be used.
          - lineMaker.animateLineOut(lineIndex [,animationSettings]);
          // Shows all lines.
          - lineMaker.showLines();
          // hides all lines.
          - lineMaker.hideLines();
          // Shows one line.
          // lineIndex: index/position of the line in the LineMaker.options.lines array.
          - lineMaker.showLine(lineIdx);
          // Hides one line.
          // lineIndex: index/position of the line in the LineMaker.options.lines array.
          - lineMaker.hideLine(lineIdx);
          // Creates a line.
          // settings is optional: same settings passed in LineMaker.options.lines for one line.
          - lineMaker.createLine([settings]);
          // Removes all lines.
          - lineMaker.removeLines();
          // Removes a line.
          // lineIndex: index/position of the line in the LineMaker.options.lines array.
          - lineMaker.removeLine(lineIdx);
          */
          var ctrls = [].slice.call(document.querySelectorAll('.actions > button'));
          ctrls.forEach(function(ctrl) {
          ctrl.setAttribute('disabled', true);
          });
          function enableButtons() {
          ctrls.forEach(function(ctrl) {
          ctrl.removeAttribute('disabled');
          });
          }
          function disableButtons() {
          ctrls.forEach(function(ctrl) {
          ctrl.setAttribute('disabled', true);
          });
          }
          document.querySelector('#animateOut').addEventListener('click', function() {
          disableButtons();
          lineMaker.animateLinesOut(enableButtons);
          });
          document.querySelector('#animateIn').addEventListener('click', function() {
          disableButtons();
          lineMaker.animateLinesIn(enableButtons);
          });
          document.querySelector('#hideAll').addEventListener('click', function() {
          lineMaker.hideLines();
          });
          document.querySelector('#showAll').addEventListener('click', function() {
          lineMaker.showLines();
          });
          /**
          * from: http://stackoverflow.com/a/1527820
          * Returns a random integer between min (inclusive) and max (inclusive)
          * Using Math.round() will give you a non-uniform distribution!
          */
          function getRandomInt(min, max) {
          return Math.floor(Math.random() * (max - min + 1)) + min;
          }
          var randomColors = ['#F44336','#E91E63','#9C27B0','#673AB7','#3F51B5','#2196F3','#03A9F4','#00BCD4','#009688','#4CAF50','#8BC34A','#CDDC39','#FFEB3B','#FFC107','#FF9800','#FF5722','#795548','#9E9E9E','#607D8B','#000'],
          randomEasings = ['easeOutExpo','easeOutCirc','easeOutSine','easeOutQuad','easeOutQuart','easeOutQuint','easeInOutExpo','easeInOutCirc','easeInOutSine','easeInOutQuad','easeInOutQuart','easeInOutQuint'],
          totalColors = randomColors.length,
          totalEasings = randomEasings.length;
          document.querySelector('#create').addEventListener('click', function() {
          var rand = getRandomInt(0, 1);
          lineMaker.createLine({
          top: rand ? 0 : getRandomInt(1, 99) + '%',
          left: rand ? getRandomInt(1, 99) + '%' : 0,
          width: rand ? getRandomInt(1,15) : '100vw',
          height: rand ? '100vh' : getRandomInt(1,15),
          color: randomColors[getRandomInt(0, totalColors-1)],
          animation: {
          duration: getRandomInt(500,1800),
          easing: randomEasings[getRandomInt(0, totalEasings-1)],
          delay: getRandomInt(0,100),
          direction: rand ? 'TopBottom' : 'LeftRight'
          }
          });
          });
          document.querySelector('#createAnimate').addEventListener('click', function() {
          disableButtons();
          var rand = getRandomInt(0, 1);
          lineMaker.createLine({
          top: rand ? 0 : getRandomInt(1, 99) + '%',
          left: rand ? getRandomInt(1, 99) + '%' : 0,
          width: rand ? getRandomInt(1,15) : '100vw',
          height: rand ? '100vh' : getRandomInt(1,15),
          color: randomColors[getRandomInt(0, totalColors-1)],
          hidden: true,
          animation: {
          duration: getRandomInt(500,1800),
          easing: randomEasings[getRandomInt(0, totalEasings-1)],
          delay: getRandomInt(0,100),
          direction: rand ? 'TopBottom' : 'LeftRight'
          }
          });
          lineMaker.animateLineIn(lineMaker.getTotalLines()-1, { complete: enableButtons });
          });
          document.querySelector('#removeAll').addEventListener('click', function() {
          lineMaker.removeLines();
          });
          })();


      